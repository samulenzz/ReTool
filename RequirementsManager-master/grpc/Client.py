import grpc
import json
from Proto import Requirement_pb2, Requirement_pb2_grpc

FReqs = [
'业务架构设计提供业务能力构想、业务任务构成、业务流程、业务信息交换、组织关系、组织机构职能、业务协作等建模功能。',
'信息架构设计提供信息活动视角、能力视角、知识视角、标准规范视角等建模功能；信息架构设计支持对信息活动流程、信息转换、能力效果要求、信息分类等体系结构数据的构建；信息架构设计支持与业务架构进行关联映射。',
'技术架构设计提供系统视角、技术视角、标准规范视角的建模功能；技术架构设计支持对系统信息交互、系统功能、技术体制、技术展望、标准规范等体系结构数据的构建；技术架构设计支持与信息架构进行关联映射。',
'原理视角提供设计原则、设计概念和设计愿景等模型设计。',
'信息活动视角提供信息活动过程模型、界面模型、数据转换模型、活动功能模型、业务活动映射模型和活动清单。',
'能力视角提供能力分解架构、能力活动依赖矩阵、效果属性模型和能力效果需求等。',
'信息组成视角提供信息关系模型、信息分类列表模型等。',
'系统视角提供系统组成、系统与信息活动映射模型、系统功能模型、系统信息交互模型、系统性能模型、系统规则模型等。',
'服务视角提供服务组成模型、服务与系统功能映射模型、服务定义模型、服务信息交互模型等。',
'标准视角提供标准规范列表和标准需求列表。',
'设计指南提供原则、规范、建议、描述形式和设计示例等功能。',
'模型创建提供自定义模型选择、创建全部模型、按类别创建模型等功能。',
'元素创建提供元素追踪功能。',
'可视化辅助编辑提供对齐参照线、树形布局、自定义对齐、锚点吸附等功能。',
'根据所选择的模型信息，协同提交系统将模型信息提交至服务器。',
'根据所选择的模型信息，协同解锁系统对模型数据进行解锁。',
'根据所选择的模型信息，协同更新系统对服务器中模型版本信息大于当前模型的进行更新。',
'根据所选择的模型信息，协同还原系统对本地存在变动的模型进行还原。',
'根据所选择的模型信息，协同锁定系统对模型数据进行锁定。',
'根据所选择的模型信息，当模型数据被锁定时，协同解锁系统对模型数据进行解锁。',
'项目计划制定对该项目下的每个模型的设计时间节点进行设定。',
'项目进度监控对该项目下的模型的设计进度进行统计汇总显示。',
# '项目变更管理对已审核通过的项目进行变更管理。',
'项目版本管理对项目的版本历史记录进行显示。',
'审阅管理支持对项目进行列表展示、设计批注、查看批注、审核、刷新等各项操作。',
'导出数据子功能将当前项目导出为XML文件或者ZIP文件。',
'导出WORD子功能将当前框架项目的整体数据导出为Word格式的文档。',
'项目管理支持打开项目、关闭项目、增删改项目、保存项目和设置项目权限等功能。',
'视图管理支持对视图的增删改和移动位置等功能。',
'模型管理支持对模型的增删改、移动位置、筛选、复用和设置权限等功能。',
'模型完备性检查对框架中所定义的模型是否全部建立进行检查。',
'实体对象完备性检查对框架中所定义的实体对象是否全部建立进行检查。',
'关系对象完备性检查对框架中所定义的关系是否全部建立进行检查。',
'业务流程完整性对OAV-2模型中实体对象是否存在关联关系进行检查。',
'信息活动流程一致性对信息活动对象的子页面模型中创建的信息活动对象是否有引用与父活动对象相同的信息元素进行检查。',
'映射关系一致性对系统与信息活动映射SV-2模型中系统与信息活动的矩阵关系是否存在实际中存在产生关系链路进行检查。',
'信息源唯一性对IAV-1模型中信息活动与信息活动之间的信息流关系线中是否存在相同的关联信息对象进行检查。',
'信息输入合法性对同一个信息活动对象中是否存在自身信息闭合进行检查。',
'信息连通性检查用于检查信息活动过程模型中同一个信息活动的输入信息与输出信息是否建立连通性。',
'仿真态势综合展示支持仿真态势的可视化综合展示。',
'活动可达性验证分析支持对体系结构模型的活动的可达性验证分析。',
'流程可行性验证分析支持对流程可执行性的验证分析。',
# '正交设计支持基于正交设计方法生成仿真试验样本。',
# '均匀设计支持基于均匀设计方法生成仿真试验样本。',
'仿真样本管理支持对仿真试验样本的管理和对仿真试验样本的调度。',
'指标体系构建提供可视化、图形化的评估指标体系建模环境。',
'指标体系编辑提供常用的模型编辑功能、建模视图可在图元颜色功能、布局方面进行配置功能和模型的语法检查功能。',
'指标体系维护提供模型存储功能和模型管理功能。',
'评估任务调度与管理功能对效能评估过程中涉及到的多个评估任务进行统一调度与管理。评估任务调度与管理功能对来自不同展示系统的评估任务执行请求进行处理。',
'根据评估任务的需要，通过数据抽取获取所需的数据，评估模型执行功能将仿真试验数据加载到评估模型，并按照评估模型中制定的评估流程，逐步执行计算模型和分析模型过程，最终生成评估结果。',
'评估任务执行控制功能提供评估任务执行过程的执行控制操作。',
'评估计算模型构建功能提供AHP等评估计算模型的可视化构建功能。评估计算模型构建功能提供对构建的评估计算模型的管理功能。 ',
'指标映射模型构建功能支持建立源数据规格模型与评估指标体系模型之间的映射关系、将仿真与实验数据自动转换成评估数据、对创建指标体系映射模型的维护管理等功能。',
'归一化模型构建功能提供指标归一化模型的可视化构建。',
'模型执行与检查功能提供对构建完成的评估模型的语法自动检查的能力；模型执行与检查功能保证评估模型的一致性和可执行性。',
'展示方案构建功能支持配置各个评估指标的数据展示方式、配置展示视图的部署方式和保存配置完成的展示方案入库。展示方案管理功能对创建的展示方案进行统一的修改、删除和管理操作。',
# '按照展示的方案，展示视图生成功能可以生成可用于展示的视图。',
'评估分析模型构建功能提供指标贡献度分析评估分析模型的可视化构建功能；并提供对构建的评估分析模型的管理功能。',
# '通过解析展示方案，能够对分析结果生成展示界面；并通过柱状图、曲线图、仪表图、雷达图多种常见的图形，展现评估结果数据。',
# '评估报告生成提供基于评估指标体系、评估计算模型、分析结果等自动生成评估报告功能。评估报告生成支持HTML、Doc等评估结果报告格式。 ',
'能够对评估结果以所见即所得的方式输出到文档中，生成Word形式的评估报告。',
]


FReqs = [
'业务架构设计提供业务能力构想、业务任务构成、业务流程、业务信息交换、组织关系、组织机构职能、业务协作等建模功能。',
'信息架构设计提供信息活动视角、能力视角、知识视角、标准规范视角等建模功能；信息架构设计支持对信息活动流程、信息转换、能力效果要求、信息分类等体系结构数据的构建；信息架构设计支持与业务架构进行关联映射。',
'技术架构设计提供系统视角、技术视角、标准规范视角的建模功能；技术架构设计支持对系统信息交互、系统功能、技术体制、技术展望、标准规范等体系结构数据的构建；技术架构设计支持与信息架构进行关联映射。',
'原理视角提供设计原则、设计概念和设计愿景等模型设计。',
'信息活动视角提供信息活动过程模型、界面模型、数据转换模型、活动功能模型、业务活动映射模型和活动清单。',
'能力视角提供能力分解架构、能力活动依赖矩阵、效果属性模型和能力效果需求等。',
'信息组成视角提供信息关系模型、信息分类列表模型等。',
'系统视角提供系统组成、系统与信息活动映射模型、系统功能模型、系统信息交互模型、系统性能模型、系统规则模型等。',
'服务视角提供服务组成模型、服务与系统功能映射模型、服务定义模型、服务信息交互模型等。',
'标准视角提供标准规范列表和标准需求列表。',
'设计指南提供原则、规范、建议、描述形式和设计示例等功能。',
'模型创建提供自定义模型选择、创建全部模型、按类别创建模型等功能。',
'元素创建提供元素追踪功能。',
'可视化辅助编辑提供对齐参照线、树形布局、自定义对齐、锚点吸附等功能。',
'根据所选择的模型信息，协同提交系统将模型信息提交至服务器。',
'根据所选择的模型信息，协同解锁系统对模型数据进行解锁。',
'根据所选择的模型信息，协同更新系统对服务器中模型版本信息大于当前模型的进行更新。',
'根据所选择的模型信息，协同还原系统对本地存在变动的模型进行还原。',
'根据所选择的模型信息，协同锁定系统对模型数据进行锁定。',
'根据所选择的模型信息，当模型数据被锁定时，协同解锁系统对模型数据进行解锁。',
'项目计划制定对该项目下的每个模型的设计时间节点进行设定。',
'项目进度监控对该项目下的模型的设计进度进行统计汇总显示。',
'项目变更管理对已审核通过的项目进行变更管理。',
'项目版本管理对项目的版本历史记录进行显示。',
'审阅管理支持对项目进行列表展示、设计批注、查看批注、审核、刷新等各项操作。',
'导出数据子功能将当前项目导出为XML文件或者ZIP文件。',
'导出WORD子功能将当前框架项目的整体数据导出为Word格式的文档。',
'项目管理支持打开项目、关闭项目、增删改项目、保存项目和设置项目权限等功能。',
'视图管理支持对视图的增删改和移动位置等功能。',
'模型管理支持对模型的增删改、移动位置、筛选、复用和设置权限等功能。',
'模型完备性检查对框架中所定义的模型是否全部建立进行检查。',
'实体对象完备性检查对框架中所定义的实体对象是否全部建立进行检查。',
'关系对象完备性检查对框架中所定义的关系是否全部建立进行检查。',
'业务流程完整性对OAV-2模型中实体对象是否存在关联关系进行检查。',
'信息活动流程一致性对信息活动对象的子页面模型中创建的信息活动对象是否有引用与父活动对象相同的信息元素进行检查。',
'映射关系一致性对系统与信息活动映射SV-2模型中系统与信息活动的矩阵关系是否存在实际中存在产生关系链路进行检查。',
'信息源唯一性对IAV-1模型中信息活动与信息活动之间的信息流关系线中是否存在相同的关联信息对象进行检查。',
'信息输入合法性对同一个信息活动对象中是否存在自身信息闭合进行检查。',
'信息连通性检查用于检查信息活动过程模型中同一个信息活动的输入信息与输出信息是否建立连通性。',
'仿真态势综合展示支持仿真态势的可视化综合展示。',
'活动可达性验证分析支持对体系结构模型的活动的可达性验证分析。',
'流程可行性验证分析支持对流程可执行性的验证分析。',
'正交设计支持基于正交设计方法生成仿真试验样本。',
'均匀设计支持基于均匀设计方法生成仿真试验样本。',
'仿真样本管理支持对仿真试验样本的管理和对仿真试验样本的调度。',
'指标体系构建提供可视化、图形化的评估指标体系建模环境。',
'指标体系编辑提供常用的模型编辑功能、建模视图可在图元颜色功能、布局方面进行配置功能和模型的语法检查功能。',
'指标体系维护提供模型存储功能和模型管理功能。',
'评估任务调度与管理功能对效能评估过程中涉及到的多个评估任务进行统一调度与管理。评估任务调度与管理功能对来自不同展示系统的评估任务执行请求进行处理。',
'根据评估任务的需要，通过数据抽取获取所需的数据，评估模型执行功能将仿真试验数据加载到评估模型，并按照评估模型中制定的评估流程，逐步执行计算模型和分析模型过程，最终生成评估结果。',
'评估任务执行控制功能提供评估任务执行过程的执行控制操作。',
'评估计算模型构建功能提供AHP等评估计算模型的可视化构建功能。评估计算模型构建功能提供对构建的评估计算模型的管理功能。 ',
'指标映射模型构建功能支持建立源数据规格模型与评估指标体系模型之间的映射关系、将仿真与实验数据自动转换成评估数据、对创建指标体系映射模型的维护管理等功能。',
'归一化模型构建功能提供指标归一化模型的可视化构建。',
'模型执行与检查功能提供对构建完成的评估模型的语法自动检查的能力；模型执行与检查功能保证评估模型的一致性和可执行性。',
'展示方案构建功能支持配置各个评估指标的数据展示方式、配置展示视图的部署方式和保存配置完成的展示方案入库。展示方案管理功能对创建的展示方案进行统一的修改、删除和管理操作。',
'按照展示的方案，展示视图生成功能可以生成可用于展示的视图。',
'评估分析模型构建功能提供指标贡献度分析评估分析模型的可视化构建功能；并提供对构建的评估分析模型的管理功能。',
'通过解析展示方案，能够对分析结果生成展示界面；并通过柱状图、曲线图、仪表图、雷达图多种常见的图形，展现评估结果数据。',
'评估报告生成提供基于评估指标体系、评估计算模型、分析结果等自动生成评估报告功能。评估报告生成支持HTML、Doc等评估结果报告格式。 ',
'能够对评估结果以所见即所得的方式输出到文档中，生成Word形式的评估报告。',
]

# FReqs = [
# '导出数据子功能将当前项目导出为XML文件或者ZIP文件。',
# '导出WORD子功能将当前框架项目的整体数据导出为Word格式的文档。',
# '能够将评估结果以所见即所得的方式输出到文档中，生成Word形式的评估报告。',
# ]

NFReqs = [
    '用户页面响应时间一般不超过3秒；打开模型数小于150个的项目的时间小于3秒；一个项目可支持的模型数不少于250个；指标节点构建层数和数量，单个视图结构下可支持管理的模型数不少于40个；能力评估分析工具构建评估指标体系可支持的层数不少于10层；能力评估分析工具构建评估指标体系可支持的指标节点不少于100个。'
]

RelReqs = [
    '正常负载情况下系统正常运行超过24小时的概率大于99.9%。',
    '系统崩溃后恢复正常的时间小于10分钟的概率等于100.00%。',
    '用户误操作后系统正常运行超过24小时的概率大于99.9%。',
]

# req_list1 = [{ 'id': '0', 'name': '关键需求', 'description': i, 'type': '2' } for i in FReqs]
req_list2 = [{ 'id': f'{i}', 'name': '关键需求', 'description': i, 'type': '3' } for i in NFReqs]
req_list3 = [{ 'id': f'{i}', 'name': '关键需求', 'description': i, 'type': '4' } for i in RelReqs]
test_data = {'items': req_list2 + req_list3}
data = json.dumps(test_data, ensure_ascii=False)

# 打开 gRPC channel，连接到 localhost:50051
# channel = grpc.insecure_channel('localhost:50051')
channel = grpc.insecure_channel('120.48.29.133:50051')
# 创建一个 stub (gRPC client)
stub = Requirement_pb2_grpc.RequirementStub(channel)
# 创建一个有效的请求消息 value
value = Requirement_pb2.Value(value=data)


# print('\n需求结构化')
# response = stub.structurization(value)
# print(response.value)

# print('\n需求冲突检测')
# response = stub.conflictdetect(value)
# print(response.value)

print('\n需求关联关系检测')
response = stub.relationship(value)
print(response.value)

print('\n共性需求识别')
response = stub.similarity(value)
print(response.value)
